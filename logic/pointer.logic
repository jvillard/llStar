/*************************************
 * Simple subtraction rules 
 *************************************/

rewrite eq_self_pred:
 builtin_eq(?x,?x) = numeric_const("1")

rewrite neq_self_pred:
 builtin_neq(?x,?x) = numeric_const("0")

/*
equiv eq0_pred:
 builtin_eq(?x,?y) = numeric_const("0") <=> ?x != ?y
without ?x != ?y
*/

rule eq0_pred_right:
   |  |- builtin_eq(a_x, a_y) = numeric_const("0") -|
  without  |- a_x != a_y
  if  |  |- a_x != a_y -|
rule eq0_pred_left:
   | builtin_eq(a_x, a_y) = numeric_const("0") |-  -|
  without a_x != a_y |-
  if  | a_x != a_y |-  -|

/*
equiv eqn0_pred:
 builtin_eq(?x,?y) != numeric_const("0") <=> ?x = ?y
without ?x = ?y
*/

rule eqn0_pred_right:
   |  |- builtin_eq(a_x, a_y) != numeric_const("0") -|
  without  |- a_x = a_y
  if  |  |- a_x = a_y -|
rule eqn0_pred_left:
   | builtin_eq(a_x, a_y) != numeric_const("0") |-  -|
  without a_x = a_y |-
  if  | a_x = a_y |-  -|


/*
equiv eq1_pred:
 builtin_eq(?x,?y) = numeric_const("1") <=> ?x = ?y
without ?x = ?y
*/

rule eq1_pred_right:
   |  |- builtin_eq(a_x, a_y) = numeric_const("1") -|
  without  |- a_x = a_y
  if  |  |- a_x = a_y -|
rule eq1_pred_left:
   | builtin_eq(a_x, a_y) = numeric_const("1") |-  -|
  without a_x = a_y |-
  if  | a_x = a_y |-  -|

equiv neq0_pred:
 builtin_neq(?x,?y) = numeric_const("0") <=> ?x = ?y
without ?x = ?y

equiv neqn0_pred:
 builtin_neq(?x,?y) != numeric_const("0") <=> ?x != ?y
without ?x != ?y

/*
equiv neq1_pred:
 builtin_neq(?x,?y) = numeric_const("1") <=> ?x != ?y
without ?x != ?y
*/

rule neq1_pred_right:
   |  |- builtin_neq(a_x, a_y) != numeric_const("1") -|
  without  |- a_x != a_y
  if  |  |- a_x != a_y -|
rule neq1_pred_left:
   | builtin_neq(a_x, a_y) != numeric_const("1") |-  -|
  without a_x != a_y |-
  if  | a_x != a_y |-  -|


equiv pointer_getelementptr0:
  !eltptr(?x,pointer_type(?gept),?p,jump(numeric_const("0"),?j))
  <=> !eltptr(?x,?gept,?p,?j)

equiv pointer_getelementptr_void:
  !eltptr(?x,pointer_type(integer_type("8")),?p,jump(?n,?j))
  <=> !eltptr(?x,pointer_type(integer_type("8")),builtin_plus(?p,?n),?j)

equiv jump_end:
  !eltptr(?x,?t,?y,jump_end()) <=> ?x = ?y

rule ptr_same_root_same_size:
 | pointer(?x,?sz,?v) |- pointer(?x,?sz,?w)
without
 ?w != ?v
if
 pointer(?x,?sz,?v) | |- ?w = ?v

/* corestar already knows that it can match identical predicates!
rule padding_same_root_same_size:
 | padding(?x,?sz) |- padding(?x,?sz)
if
 padding(?x,?sz) | |- 
*/

rule remove_malloced:
 | malloced(?mb,?n) |- malloced(?mb,?m)
without
 ?n != ?m
if
 malloced(?mb,?n) | |- ?n = ?m

/*************************************
 * rules for contradictions 
 *************************************/

/*
  If we have an assumption of a pointer
  for null then we have a contradiction.
 */
rule pointer_nil_contradiction:
  pointer(numeric_const("0"),?t,?v) | |- 
if

/* same for malloc */
rule malloced_nil_contradiction: 
  malloced(numeric_const("0"),?s) | |- 
if


/**************************************
 *  Rules for failed proofs
 **************************************/

/*
  If we need to prove that pointer exists for null
  then we are going to fail, unless we can find 
  a contradiction.
 */
rule pointer_nil_failed :
  | |- pointer(numeric_const("0"),?t,?v) 
if
  | |- pointer(numeric_const("0"),?t,?v) * False

rule pointer_not_null :
  pointer(?x,?t,?v) | |- ?x!=numeric_const("0")
if
  pointer(?x,?t,?v) | |-
