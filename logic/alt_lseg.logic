/***************************************
 * Singly-linked list segments (lseg). *
 ***************************************/

/**
 * Empty list segment.
 */
equiv lseg_empty:
  lseg(?s,?i, ?i) <=> ?i = ?i

/*
  Contradiction (lseg_ne describes non-empty list segment).
*/
equiv lseg_ne_empty1:
  lseg_ne(?s,?i, ?j) => ?i = ?j <=> False

/*
  Contradiction (lseg_ne describes non-empty list segement).
*/
equiv lseg_ne_empty2:
  lseg_ne(?s,?i, ?i) <=> False

/*
  Contradiction.
    A heap cannot split into two part containing the same field.
*/
equiv lseg_ne_lseg_ne_contradiction1:
  lseg_ne(?r,?i, ?j) * lseg_ne(?s,?i, ?k) <=> False

equiv lseg_lseg_contradiction2:
      lseg_ne(?r,?i, ?m) * lseg_ne(?s,?j, ?n)
  =>  ?i = ?j <=> False

/*
  Equivalence.
   All non-empty "lseg" list segements are converted to "lseg_ne" list segments.
*/
equiv lseg_non_empty1:
  ?i != ?j => lseg(?s,?i, ?j) <=> lseg_ne(?s,?i, ?j)

/*
  Substraction rules for list segments.
*/
rule lseg_app_rollup2:
  | lseg_ne(?s,?i, ?j) * lseg_ne(?s,?j, ?k)
    |- lseg_ne(?s,?i, ?k)
if
  lseg_ne(?s,?i, ?j) * lseg_ne(?s,?j, ?k) |
   |- 

rule lseg_app_rollup3:
  | lseg_ne(?s,?i, ?j) * lseg_ne(?s,?j, ?l) * lseg_ne(?s,?l, ?k)
    |- lseg_ne(?s,?i, ?k)
if
  lseg_ne(?s,?i, ?j) * lseg_ne(?s,?j, ?l) * lseg_ne(?s,?l, ?k) |
   |- 

rule lseg_app_rollup_trans:
  | lseg_ne(?s,?i, ?j) * lseg_ne(?s,?j, ?l) * lseg_ne(?s,?m, ?k)
    |- lseg_ne(?s,?i, ?k)
if
  lseg_ne(?s,?i, ?l) | lseg_ne(?s,?m, ?k)
   |- lseg_ne(?s,?l,?k)

rule lseg_same:
  | lseg_ne(?s,?i, ?j)
    |- lseg_ne(?s,?i, ?k)
without
  ?j != ?k
if
  lseg_ne(?s,?i, ?j) |
   |- ?j = ?k

/*
  Equality of non-empty list segments.

  If non-empty list segments with the same first node appear on both sides of
  the entailment, we split the RHS segment into tail and head according to the
  inductive case of the "lseg" definition.
*/
rule lseg_cons_expand:
  | lseg_ne(?s,?i, ?j)
    |- lseg_ne(?s,?i, ?j2)
if
  | lseg_ne(?s,?i, ?j)
    |- node(?s,?i, _n) * lseg(?s,_n, ?j2)

/*
  Equivalence.

  A list segment must be either empty or non-empty.
*/
equiv lseg_disj:
      lseg(?s,?i, ?j)
  <=> ?i = ?j
        || lseg_ne(?s,?i, ?j)

/*
  Contradiction.

  A node object cannot be null.
*/
equiv node_not_nil:
  node(?s,nil(), ?n) <=>  False

/*
  Contradiction.

  If two node with the same name exit (on the same side on the entailment),
  then we have a contradiction (see field_field_contradiction1 for comparison).
*/
equiv node_not_eq:
  node(?r,?x, ?n) * node(?s,?x, ?m) <=> False
