#!/usr/bin/python

import cgi
import cgitb
import os
import re
import subprocess
import tempfile
import threading
import time

cgitb.enable()
form = cgi.FieldStorage()

print "Content-Type: text/html"     # HTML is following
print                               # blank line, end of headers

input_tabs = ['code_ll', 'specs', 'logic_rules', 'abs_rules']

head_title = 'llStar-upon-Web'
page_title = '<span style="font-family:serif;">llStar</span>'

# We assume that the web thingy is run from the webapp/ directory of the llStar
# distribution, and use llStar from the same place (..)
llstarbin = '../bin/llstar'
workdir='llstar'
expath = '../examples/'

# always make sure this is one of the preset examples
default_example = 'list_dispose.c.O2'

# llStar shouldn't run for more than [timeout] seconds
timeout = 100.0
has_timed_out = False

######################
# Utils

def file_to_str(fileName):
    '''Return a string containing the contents of the named file.'''
    fin = open(fileName)
    contents = fin.read()
    fin.close()
    return contents

def str_to_file(text, filename):
    '''Write a file with the given name and the given text.'''
    output = open(filename,'w')
    output.write(text)
    output.close()

def find_suffixed_file(fname, suffix):
    ''' look for a file of the form prefix.[suffix] where prefix is some
    .-prefix of [fname].

    Adapted from llStar/src/llstar_config.ml.'''
    def try_prefix(pref):
        (root, base) = os.path.split(pref)
        if base == '':
            name = os.path.join(root, suffix)
        else:
            name = pref + "." + suffix
        if os.path.isfile(name):
            return name
        else:
            # no file found. We'll try p.suffix if we were trying p.bla.suffix,
            # otherwise just suffix, otherwise None
            if base == '':
                return None
            else:
                (root, ext) = os.path.splitext(pref)
                if ext == '':
                    (root, base) = os.path.split(pref)
                    return try_prefix(os.path.join(root, ''))
                else:
                    return try_prefix(root)
    return try_prefix(fname)

def discover_example_list():
    exples = {}
    for dirname in sorted(os.listdir(expath)):
        try:
            for filename in sorted(os.listdir(os.path.join(expath, dirname))):
                (root, ext) = os.path.splitext(filename)
                if ext == '.ll':
                    fqfilename = os.path.join(expath, dirname, filename)
                    def findsuffandread(s):
                        suffedfile = find_suffixed_file(fqfilename,s)
                        if suffedfile:
                            return file_to_str(suffedfile)
                        else:
                            return ''
                    exples[root] = {
                        'code_ll': file_to_str(fqfilename),
                        'specs': findsuffandread('spec'),
                        'logic_rules': findsuffandread('logic'),
                        'abs_rules': findsuffandread('abs') }
        except OSError: pass
    return exples

######################
# Webby things

def mk_example_menu(ex, cur_ex):
    menu = ''
    for example in sorted(ex):
        if example == cur_ex:
            selected = ' selected="selected"'
        else:
            selected = ''
        menu = menu + '<option value="%s"%s>%s</option>' % (example, selected, example)
    return menu

imported = []
def fill_import_tabs(text):
    '''find import directives in [text] and returns a list of
    dictonaries with the imported files'''
    global imported # FIXME: ugly hack
    imports = re.findall('import[ ]+"([^"]+)"[ ]*;', text)
    l = []
    for i in imports:
        fi = None
        for prefix in ['', '../rules', '../specs']:
            try:
                fi = file(os.path.join(prefix, i), 'r')
            except IOError:
                pass
        if fi and not i in imported:
            import_text = fi.read()
            l.append({'import_id': i, 'imported_text': import_text})
            imported.append(i)
            l = l + fill_import_tabs(import_text)
    return l

def get_or_empty(p):
    try:
        return form[p].value
    except KeyError, e:
        return ''

def get_sources_from_http_POST():
    srcs = {}
    for s in input_tabs:
        srcs[s] = get_or_empty(s)
    return srcs

def user_picked_an_example():
    '''Returns [True] if the user has clicked on a preset example'''
    return ('example' in form)

def user_asked_for_llStar():
    '''Returns [True] if the user has clicked on the "run llStar" button'''
    return ('code_ll' in form)


######################
# Serious business

def compile_to_bitcode(fn, bcfn):
    # TODO: check errors
    subprocess.call(['llvm-as-3.3', '-f', '-o', bcfn, fn])

def dotfile_to_svg(infname, outfname):
    '''Takes the file name of a valid dot file and writes SVG graphics in the [outfname]'''
    dot_command = ['dot', '-Tsvg', '-o', outfname, infname]
    subprocess.call(dot_command)

def on_process_timeout(p):
    '''To be called when the execution of process [p] times out.'''
    global has_timed_out
    if p.poll() == None:
        # if [p] hasn't terminated yet, kill it
        try:
            p.kill()
            has_timed_out = True
            return
        except:
            # [p] could have terminated between the poll() and kill() calls...
            pass
    has_timed_out = False

def run_llStar(web_inputs):
    # working directory
    if not os.path.isdir(workdir):
        # race condition, and potentially trying to overwrite an existing
        # file. ok for now (don't put anything stupid in [workdir]).
        os.mkdir(workdir)
    tmpdir = tempfile.mkdtemp(dir=workdir)
    def pathify(s):
        return os.path.join(tmpdir, s)
    # put code, specs and logic rules into temp files
    for s in input_tabs:
        fname = pathify(s)
        str_to_file(web_inputs[s], fname)
    # compile source code to bitcode
    llfile = pathify('code_ll') # make sure this matches name in dict
    bitfile = pathify('source.bc')
    compile_to_bitcode(llfile, bitfile)
    # launch llStar
    llstar_command = [llstarbin,
                        '-s', pathify('specs'),
                        '-l', pathify('logic_rules'),
                        '-a', pathify('abs_rules'),
                        '-outdir', pathify('llstarout'),
                        bitfile]
    t0 = time.time()
    process = subprocess.Popen(llstar_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    timer = threading.Timer(timeout, on_process_timeout, [process])
    timer.start()
    # communicate() is blocking
    (out, err) = process.communicate() #FIXME: should redirect to file in case the output is very large
    exit_code = process.returncode
    exec_time = time.time() - t0 # time the execution
    timer.cancel() # process returned before the timeout, stop timer
    # process results
    results = {}
    execution_dot = os.path.join(tmpdir, 'llstarout', 'source.bc.execution_core.dot')
    execution_svg = os.path.join(tmpdir, 'llstarout', 'source.bc.execution_core.svg')
    dotfile_to_svg(execution_dot, execution_svg)
    results['execution_svg'] = execution_svg
    # unlink temp files
    #TODO
    # done
    results['workdir'] = tmpdir
    results['llstar_output'] = out + err
    results['llstar_command'] = ' '.join(llstar_command)
    results['llstar_time'] = "%.2f" % exec_time
    results['llstar_output_height'] = min(100, results['llstar_output'].count('\n') + 1)
    if has_timed_out:
        html_results = file_to_str('output_timeout.html').format(**results)
    else:
        html_results = file_to_str('output_success.html').format(**results)
    return html_results

    

def main():
    web_inputs = {}
    preset_examples = discover_example_list()
    output_section = ''
    if user_picked_an_example():
        web_inputs.update(preset_examples[form['example'].value])
        web_inputs['preset_example'] = form['example'].value
    elif user_asked_for_llStar():
        #print 'no example'
        #print e
        web_inputs = get_sources_from_http_POST()
        output_section = run_llStar(web_inputs)
        # TODO: should give the last example picked here, if it still matches. In a cookie?
        web_inputs['preset_example'] = default_example
    else:
        # looks like the user didn't click on anything yet
        #print 'no input'
        #print e
        # TODO: code duplication with the first branch...
        web_inputs.update(preset_examples[default_example])
        web_inputs['preset_example'] = default_example
        # here we could display something to encourage the user to run the tool
    
    imports = fill_import_tabs(web_inputs['specs'] + web_inputs['logic_rules'] + web_inputs['abs_rules'])
    l = []
    for i in imports:
        l.append(file_to_str('import_tab.html').format(**i))
    web_inputs['import_tabs'] = ''.join(l)
    
    web_inputs['example_menu'] = mk_example_menu(preset_examples, web_inputs['preset_example'])
    input_section = file_to_str('input.html').format(**web_inputs)
    template_vars = globals().copy()  # get global...
    template_vars.update(locals())         # ...and local variables
    print file_to_str('webthingy.html').format(**template_vars)


# let's call the main function
main()
