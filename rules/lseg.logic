import "pointer.logic";

/***************************************
 *  This file defines 
 *
 *  node
 *  lseg
 *  lseg_ne
 *
 ***************************************/


rule nobacktrack lseg_ne_not_nil:
  lseg_ne(lltype ?s,NULL(),i64 ?y) | |-
if
;

rule nobacktrack lseg_not_nil:
  lseg(lltype ?s,NULL(),i64 ?y) | |-
if
  | i64 ?y=NULL() |-
;

rule nobacktrack node_not_nil:
  sllnode(lltype ?s,i64 ?x,i64 ?y) | |- i64 ?x != NULL()
if
  | |-
;

rule nobacktrack node_not_eq:
  sllnode(lltype ?s,i64 ?x,i64 ?y) * sllnode(lltype ?s,i64 ?x,i64 ?w) | |-
if
;

/*************************************
 * Simple subtraction rules 
 *************************************/

rule nobacktrack node_equal:
  | sllnode(lltype ?s,?i,?n) |- sllnode(lltype ?s,?i,?n2)
if
  sllnode(lltype ?s,?i,?n) | |- ?n = ?n2
;

rule nobacktrack lseg_ne_unroll_node_exists:
  | lseg_ne(lltype ?s,?i,?j) |- sllnode(lltype ?s,?i,?n)
if
  | sllnode(lltype ?s,?i,_v) * lseg(lltype ?s,_v,?j) |- sllnode(lltype ?s,?i,?n)
;

rule nobacktrack lseg_ne_unroll_first_exists :
| lseg_ne(lltype ?s,i64 ?x,i64 ?y) |- pointer(i64 ?x,i64 ?w,i64 ?z)
if
| sllnode(lltype ?s,i64 ?x,_fooz) * lseg(lltype ?s,_fooz,i64 ?y)  |- pointer(i64 ?x,i64 ?w,i64 ?z)
;

rule nobacktrack lseg_ne_unroll_offset_exists :
| lseg_ne(lltype ?s,i64 ?x,i64 ?y) |- pointer(bvadd.64(i64 ?x,?offset),i64 ?w,i64 ?z)
if
| sllnode(lltype ?s,i64 ?x,_fooz) * lseg(lltype ?s,_fooz,i64 ?y)  |- pointer(bvadd.64(i64 ?x,?offset),i64 ?w,i64 ?z)

;

rule nobacktrack lseg_ne_lseg_ne_match :
  lseg_ne(lltype ?s,i64 ?z,i64 ?w) | lseg_ne(lltype ?s,i64 ?x,i64 ?y) |- lseg_ne(lltype ?s,i64 ?x,i64 ?z)
if
  lseg_ne(lltype ?s,i64 ?x,i64 ?y) | |- lseg(lltype ?s,i64 ?y,i64 ?z)
;

rule nobacktrack lseg_ne_node_match :
  sllnode(lltype ?s,i64 ?z,i64 ?w) | lseg_ne(lltype ?s,i64 ?x,i64 ?y) |- lseg_ne(lltype ?s,i64 ?x,i64 ?z)
if
  lseg_ne(lltype ?s,i64 ?x,i64 ?y) | |- lseg(lltype ?s,i64 ?y,i64 ?z)
;

rule nobacktrack lseg_ne_pointer_match :
  pointer(i64 ?z,?f,i64 ?w) | lseg_ne(lltype ?s,i64 ?x,i64 ?y) |- lseg_ne(lltype ?s,i64 ?x,i64 ?z)
if
  lseg_ne(lltype ?s,i64 ?x,i64 ?y) | |- lseg(lltype ?s,i64 ?y,i64 ?z)
;

rule nobacktrack lseg_nil_match :
  | lseg_ne(lltype ?s,i64 ?x,i64 ?y) |- lseg_ne(lltype ?s,i64 ?x,i64 ?z)
if
  lseg_ne(lltype ?s,i64 ?x,i64 ?y) | |- lseg(lltype ?s,i64 ?y,i64 ?z) * i64 ?z = NULL()

;

rule nobacktrack nl_lseg_ne_exact :
  | sllnode(lltype ?s,i64 ?x,i64 ?y) |- lseg_ne(lltype ?s,i64 ?x,i64 ?y)
if
  sllnode(lltype ?s,i64 ?x,i64 ?y) | |- 
;

rule nobacktrack nl_lseg_ne_match :
  | sllnode(lltype ?s,i64 ?x,i64 ?y) |- lseg_ne(lltype ?s,i64 ?x,i64 ?z)
if
  sllnode(lltype ?s,i64 ?x,i64 ?y) | |- lseg(lltype ?s,i64 ?y,i64 ?z)
;




rule nobacktrack lseg_left :
  | lseg(lltype ?s,i64 ?x,i64 ?y) |- 
if
  | lseg_ne(lltype ?s,i64 ?x,i64 ?y) |- ;
  | i64 ?x=i64 ?y |- 
;

rule nobacktrack lseg_right :
  | |- lseg(lltype ?s,i64 ?x,i64 ?y) 
if
  | |- lseg_ne(lltype ?s,i64 ?x,i64 ?y) 
or
  | |- i64 ?x = i64 ?y 
;

/*************************************
 * rules for contradictions 
 *************************************/
rule nobacktrack lseg_ne_pointer_contradiction:
lseg_ne(lltype ?s,i64 ?x,?t) * pointer(i64 ?x,?sz,i64 ?z) | |- 
if
;

rule nobacktrack lseg_ne_node_contradiction :
lseg_ne(lltype ?s,i64 ?x,?t) * sllnode(lltype ?ss,i64 ?x,i64 ?z) | |- 
if
;

rule nobacktrack lseg_ne_lseg_ne_contr :
lseg_ne(lltype ?s,i64 ?x,?t) * lseg_ne(lltype ?ss,i64 ?x,i64 ?z) | |-
if
;

rule nobacktrack lseg_ne_lseg_ne_contr :
 | |- lseg_ne(lltype ?s,i64 ?x,?t) * lseg_ne(lltype ?ss,i64 ?x,i64 ?z)
if
 | |- x!=x 
;

/* this helps with pointer arithmetic */
/*
rule nobacktrack node_no_overflow:
  | sllnode(lltype ?s,i64 ?x,?n) |-
without
  !bvugt(bvadd.64(i64 ?x, sizeof(lltype ?s)),i64 ?x)
if
  | !bvugt(bvadd.64(i64 ?x, sizeof(lltype ?s)),i64 ?x) * sllnode(lltype ?s,i64 ?x,?n) |-
*/