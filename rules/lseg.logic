import "pointer.logic";

/***************************************
 *  This file defines 
 *
 *  node
 *  ls
 *  lspe
 *
 ***************************************/


rule node_not_nil:
  node(?s,NULL(),?y) | |-
if

rule lseg_ne_not_nil:
  lseg_ne(?s,NULL(),?y) | |-
if

rule lseg_not_nil:
  lseg(?s,NULL(),?y) | |-
if
  | ?y=NULL() |-


rule node_not_nil:
  node(?s,?x,?y) | |- ?x!=NULL()
if
  | |-

rule node_not_eq:
  node(?s,?x,?y) * node(?s,?x,?w) | |-
if


/*************************************
 * Simple subtraction rules 
 *************************************/

rule node_equal:
  | node(?s,?i,?n) |- node(?s,?j,?n2)
if
  node(?s,?i,?n) | |- ?n = ?n2

rule lseg_ne_unroll_node_exists:
  | lseg_ne(?s,?i,?j) |- node(?s,?i,?n)
if
  | node(?s,?i,_v) * lseg(?s,_v,?j) |- node(?s,?i,?n)

rule lseg_ne_unroll_first_exists :
| lseg_ne(?s,?x,?y) |- pointer(?x,?w,?Z)
if
| node(?s,?x,_fooz) * lseg(?s,_fooz,?y)  |- pointer(?x,?w,?Z)

rule lseg_ne_unroll_offset_exists :
| lseg_ne(?s,?x,?y) |- pointer(bvadd.64(?x,?offset),?w,?Z)
if
| node(?s,?x,_fooz) * lseg(?s,_fooz,?y)  |- pointer(bvadd.64(?x,?offset),?w,?Z)


rule lseg_ne_lseg_ne_match :
  lseg_ne(?s,?z,?w) | lseg_ne(?s,?x,?y) |- lseg_ne(?s,?x,?z)
if
  lseg_ne(?s,?x,?y) | |- lseg(?s,?y,?z)

rule lseg_ne_node_match :
  node(?s,?z,?w) | lseg_ne(?s,?x,?y) |- lseg_ne(?s,?x,?z)
if
  lseg_ne(?s,?x,?y) | |- lseg(?s,?y,?z)

rule lseg_ne_pointer_match :
  pointer(?z,?f,?w) | lseg_ne(?s,?x,?y) |- lseg_ne(?s,?x,?z)
if
  lseg_ne(?s,?x,?y) | |- lseg(?s,?y,?z)

rule lseg_nil_match :
  | lseg_ne(?s,?x,?y) |- lseg_ne(?s,?x,?z)
if
  lseg_ne(?s,?x,?y) | |- lseg(?s,?y,?z) * ?z = NULL()



rule nl_lseg_ne_match :
  lseg_ne(?s,?z,?w) | node(?s,?x,?y) |- lseg_ne(?s,?x,?z)
if
  node(?s,?x,?y) | |- lseg(?s,?y,?z)

rule nl_node_match :
  node(?s,?z,?w) | node(?s,?x,?y) |- lseg_ne(?s,?x,?z)
if
  node(?s,?x,?y) | |- lseg(?s,?y,?z)

rule nl_pointer_match :
  pointer(?z,?f,?w) | node(?s,?x,?y) |- lseg_ne(?s,?x,?z)
if
  lseg_ne(?s,?x,?y) | |- lseg(?s,?y,?z)




rule lseg_left :
  | lseg(?s,?x,?y) |- 
if
  | lseg_ne(?s,?x,?y) |- ;
  | ?x=?y |- 


rule lseg_right :
  | |- lseg(?s,?x,?y) 
if
  | |- lseg_ne(?s,?x,?y) 
or
  | |- ?x=?y 


/*************************************
 * rules for contradictions 
 *************************************/
rule lseg_ne_pointer_contradiction:
lseg_ne(?s,?x,?t) * pointer(?x,?sz,?z) | |- 
if

rule lseg_ne_node_contradiction :
lseg_ne(?s,?x,?t) * node(?ss,?x,?z) | |- 
if

rule lseg_ne_lseg_ne_contr :
lseg_ne(?s,?x,?t) * lseg_ne(?ss,?x,?z) | |-
if

rule lseg_ne_lseg_ne_contr :
 | |- lseg_ne(?s,?x,?t) * lseg_ne(?ss,?x,?z)
if
 | |- x!=x 


/* this helps with pointer arithmetic */
rule node_no_overflow:
  | node(?s,?x,?n) |-
without
  !bvugt(bvadd.64(?x, sizeof(named_type(?s))),?x)
if
  | !bvugt(bvadd.64(?x, sizeof(named_type(?s))),?x) * node(?s,?x,?n) |-
