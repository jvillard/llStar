predicate dag (lltype, i64, int);
predicate dagnode(lltype, i64, i64, i64);
function int mdag(int, i64);
function int mnode(i64, i64);
predicate ocon(bool, bool);
predicate ewand(bool, bool);

/* empty dag */
rewrite dag_nil:
  dag(lltype ?t,NULL(),int ?d) -> emp;

/* unfold dag to get root */
/*
rule nobacktrack dag_unfold[st]:
 bool ?f | dag(lltype ?t,i64 ?x,int ?d) * i64 ?x != NULL() * bool ?fl |- bool ?fr * pointer(i64 ?x, st ?w)
if
 bool ?f |  dagnode(lltype ?t,i64 ?x, i64 _l, i64 _r)
  * ocon(dag(lltype ?t, i64 _l,int ?d), dag(lltype ?t, i64 _r,int ?d))
  * mdag(int ?d,i64 ?x) = mnode(i64 _l,i64 _r)
 * bool ?fl |- bool ?fr * pointer(i64 ?x, st ?w)
;*/

rewrite dag_unfold:
  dag(lltype ?t,i64 ?x,int ?d) * i64 ?x != NULL() * bool ?f
  -> dagnode(lltype ?t,i64 ?x, i64 _l, i64 _r)
    * ocon(dag(lltype ?t, i64 _l,int ?d), dag(lltype ?t, i64 _r,int ?d))
    * mdag(int ?d,i64 ?x) = mnode(i64 _l,i64 _r) * bool ?f
;

/* fold back into a dag */
rule dag_fold:
 bool ?f |  dagnode(lltype ?t,i64 ?x,i64 ?l,i64 ?r)
  * ocon(dag(lltype ?t,i64 ?l,int ?d), dag(lltype ?t,i64 ?r,int ?d))
  * mdag(int ?d,i64 ?x) = mnode(i64 ?l,i64 ?r)
 * bool ?fl |- bool ?fr * dag(lltype ?t,i64 ?x,int ?dd)
if
 bool ?f * dag(lltype ?t,i64 ?x,int ?d) | bool ?fl |- bool ?fr * int ?d = int ?dd
;

/* extract dags from overlapping conjunctions */

rule dagl_dagr_dagl:
 bool ?f | ocon(dag(lltype ?t,i64 ?y,int ?d1), bool ?dags)
 * bool ?fl |- bool ?fr * dag(lltype ?t,i64 ?y,int ?d2)
if
   dag(lltype ?t,i64 ?y,int ?d1) *
 bool ?f | ewand(dag(lltype ?t,i64 ?y,int ?d1),
         ocon(dag(lltype ?t,i64 ?y,int ?d1), bool ?dags))
 * bool ?fl |- bool ?fr * int ?d1 = int ?d2
;

rule dagl_dagr_dagr:
 bool ?f | ocon(bool ?dags, dag(lltype ?t,i64 ?z,int ?d1))
 * bool ?fl |- bool ?fr * dag(lltype ?t,i64 ?z,int ?d2)
if
   dag(lltype ?t,i64 ?z,int ?d1) *
 bool ?f | ewand(dag(lltype ?t,i64 ?z,int ?d1),
         ocon(bool ?dags, dag(lltype ?t,i64 ?z,int ?d1)))
 * bool ?fl |- bool ?fr * int ?d1 = int ?d2
;


/* eliminate wands */

rule dag_ewand_left:
 bool ?f |   dag(lltype ?t,i64 ?y,int ?d)
   * ewand(dag(lltype ?t,i64 ?y,int ?dd), ocon(int ?d1,int ?d2))
 * bool ?fl |- bool ?fr
if
 bool ?f | ocon(int ?d1, int ?d2) * bool ?fl |- bool ?fr * int ?d = int ?dd
;

rule dag_ewand_right:
 bool ?f |   dag(lltype ?t,i64 ?z,int ?d)
   * ewand(dag(lltype ?t,i64 ?z,int ?dd), ocon(int ?d1,int ?d2))
 * bool ?fl |- bool ?fr
if
 bool ?f | ocon(int ?d1, int ?d2) * bool ?fl |- bool ?fr * int ?d = int ?dd
;


/* extract root from overlapping conjunctions */

rule subdag_lunfold[st]:
 bool ?f | ocon(dag(lltype ?t,i64 ?y,int ?d), bool ?dags)
 * bool ?fl |- bool ?fr * pointer(i64 ?y,st ?w)
if
 bool ?f |  dag(lltype ?t,i64 ?y,int ?d)
  * ewand(dag(lltype ?t,i64 ?y,int ?d), ocon(dag(lltype ?t,i64 ?y,int ?d), bool ?dags))
 * bool ?fl |- bool ?fr * pointer(i64 ?y,st ?w)
;

rule subdag_runfold[st]:
 bool ?f | ocon(bool ?dags, dag(lltype ?t,i64 ?z,int ?d))
 * bool ?fl |- bool ?fr * pointer(i64 ?z,st ?w)
if
 bool ?f |  dag(lltype ?t,i64 ?z,int ?d)
  * ewand(dag(lltype ?t,i64 ?z,int ?d), ocon(bool ?dags, dag(lltype ?t,i64 ?z,int ?d)))
 * bool ?fl |- bool ?fr * pointer(i64 ?z,st ?w)
;


/* eliminate wands to get deep dags */

rule subdag_fold1[t]:
 bool ?f |  dagnode(lltype ?t,i64 ?x,i64 ?l,i64 ?r)
  * ocon(dag(lltype ?t,i64 ?l,int ?d), dag(lltype ?t,i64 ?r,int ?d))
  * ewand(dag(lltype ?t,i64 ?x,int ?d), ocon(dag(lltype ?t,i64 ?x,int ?d), dag(lltype ?t,i64 ?y,int ?d)))
 * bool ?fl |- bool ?fr * pointer(i64 ?y,t ?w)
if
 bool ?f | ocon(dag(lltype ?t,i64 ?x,int ?d),
           dag(lltype ?t,i64 ?y,int ?d))
 * bool ?fl |- bool ?fr * pointer(i64 ?y,t ?w)
;

rule subdag_fold2:
 bool ?f | dagnode(lltype ?t,i64 ?y,i64 ?l,i64 ?r)
  * ocon(dag(lltype ?t,i64 ?l,int ?d), dag(lltype ?t,i64 ?r,int ?d))
  * ewand(dag(lltype ?t,i64 ?y,int ?d), ocon(dag(lltype ?t,i64 ?x,int ?d), dag(lltype ?t,i64 ?y,int ?d)))
 * bool ?fl |- bool ?fr * dag(lltype ?t,i64 ?x,int ?dd)
if
 bool ?f | ocon(dag(lltype ?t,i64 ?x,int ?d),
           dag(lltype ?t,i64 ?y,int ?d))
 * bool ?fl |- bool ?fr * dag(lltype ?t,i64 ?x,int ?dd)
;

rule remove_dag:
  bool ?f | dag(lltype ?t, i64 ?x, int ?d) * bool ?fl
  |- bool ?fr * dag(lltype ?t, i64 ?x, int ?dd)
if
  bool ?f * dag(lltype ?t, i64 ?x, int ?d) | bool ?fl
  |- bool ?fr * int ?d = int ?dd
;