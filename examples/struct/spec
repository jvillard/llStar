import "../../specs/stdlib.spec";

norbert:
  {!type(a,bv_const("32", "0")) * !type(b,bv_const("64", "1"))}
  {pointer($ret_v1,sizeof(named_type("node")),bv_concat(@parameter0:,@parameter1:)) * malloced($ret_v1,sizeof(named_type("node")))
   || $ret_v1 = NULL()}

chew_slowly:
   {}
   {$ret_v1 = @parameter0:}

setint:
  {pointer(@parameter0:,sizeof(integer_type(numeric_const("32"))),_w)}
  {pointer(@parameter0:,sizeof(integer_type(numeric_const("32"))),bv_const("32", "0"))}

/* this function is modified by LLVM which does not appear to support passing
 * structs by value...
*/
yay_int: {pointer(@parameter0:,sizeof(pointer_type(named_type("struct.ij"))),_v)
      * pointer(_v,sizeof(named_type("struct.ij")),_w)}
  {pointer(@parameter0:,sizeof(pointer_type(named_type("struct.ij"))),_v)
      * pointer(_v,sizeof(named_type("struct.ij")),_w)}

setifield:
  {pointer(@parameter0:,sizeof(named_type("struct.oneint")),_v)}
  {pointer(@parameter0:,sizeof(named_type("struct.oneint")),bv_const("32", "0"))}

yay_yay_int:
  {pointer(@parameter0:,sizeof(named_type("struct.ij")),_v)}
  {pointer(@parameter0:,sizeof(named_type("struct.ij")),builtin_bvconcat(bv_const("32", "0"),bv_const("32", "0")))}

yay_yay_int2:
  {pointer(@parameter0:,sizeof(named_type("struct.ij")),builtin_bvconcat(bv_const("32", "0"),_v))}
  {pointer(@parameter0:,sizeof(named_type("struct.ij")),bv_const("64", "0"))}

main:
   {}
   {$ret_v1 = builtin_bvmul(bv_const("32", "32"),bv_const("32", "52"))}

